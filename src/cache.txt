https://github.com/browser-use/web-ui/blob/main/webui.py|1743007200075|web-ui/webui.py at main · browser-use/web-ui · GitHub Skip to content Navigation Menu Toggle navigation Sign in Product GitHub Copilot Write better code with AI Security Find and fix vulnerabilities Actions Automate any workflow Codespaces Instant dev environments Issues Plan and track work Code Review Manage code changes Discussions Collaborate outside of code Code Search Find more, search less Explore All features Documentation GitHub Skills Blog Solutions By company size Enterprises Small and medium teams Startups Nonprofits By use case DevSecOps DevOps CI/CD View all use cases By industry Healthcare Financial services Manufacturing Government View all industries View all solutions Resources Topics AI DevOps Security Software Development View all Explore Learning Pathways Events &amp; Webinars Ebooks &amp; Whitepapers Customer Stories Partners Executive Insights Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Enterprise Enterprise platform AI-powered developer platform Available add-ons Advanced Security Enterprise-grade security features Copilot for business Enterprise-grade AI features Premium Support Enterprise-grade 24/7 support Pricing Search or jump to... Search code, repositories, users, issues, pull requests... --> Search Clear Search syntax tips Provide feedback --> We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly --> Name Query To see all available qualifiers, see our documentation . Cancel Create saved search Sign in Sign up Reseting focus You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert {{ message }} browser-use / web-ui Public Notifications You must be signed in to change notification settings Fork 1.7k Star 10.1k Code Issues 202 Pull requests 29 Actions Projects 0 Security Insights Additional navigation options Code Issues Pull requests Actions Projects Security Insights Files   main Breadcrumbs web-ui / webui.py Copy path Blame Blame Latest commit   History History 1145 lines (1022 loc) · 44.4 KB   main Breadcrumbs web-ui / webui.py Top File metadata and controls Code Blame 1145 lines (1022 loc) · 44.4 KB Rawimport pdb import logging from dotenv import load_dotenv load_dotenv () import os import glob import asyncio import argparse import os logger = logging . getLogger ( __name__ ) import gradio as gr from browser_use . agent . service import Agent from playwright . async_api import async_playwright from browser_use . browser . browser import Browser , BrowserConfig from browser_use . browser . context import ( BrowserContextConfig , BrowserContextWindowSize , ) from langchain_ollama import ChatOllama from playwright . async_api import async_playwright from src . utils . agent_state import AgentState from src . utils import utils from src . agent . custom_agent import CustomAgent from src . browser . custom_browser import CustomBrowser from src . agent . custom_prompts import CustomSystemPrompt , CustomAgentMessagePrompt from src . browser . custom_context import BrowserContextConfig , CustomBrowserContext from src . controller . custom_controller import CustomController from gradio . themes import Citrus , Default , Glass , Monochrome , Ocean , Origin , Soft , Base from src . utils . default_config_settings import default_config , load_config_from_file , save_config_to_file , \ save_current_config , update_ui_from_config from src . utils . utils import update_model_dropdown , get_latest_files , capture_screenshot # Global variables for persistence _global_browser = None _global_browser_context = None _global_agent = None # Create the global agent state instance _global_agent_state = AgentState () def resolve_sensitive_env_variables ( text ): &quot;&quot;&quot; Replace environment variable placeholders ($SENSITIVE_*) with their values. Only replaces variables that start with SENSITIVE_. &quot;&quot;&quot; if not text : return text import re # Find all $SENSITIVE_* patterns env_vars = re . findall ( r&#039;\$SENSITIVE_[A-Za-z0-9_]*&#039; , text ) result = text for var in env_vars : # Remove the $ prefix to get the actual environment variable name env_name = var [ 1 :] # removes the $ env_value = os . getenv ( env_name ) if env_value is not None : # Replace $SENSITIVE_VAR_NAME with its value result = result . replace ( var , env_value ) return result async def stop_agent (): &quot;&quot;&quot;Request the agent to stop and update UI with enhanced feedback&quot;&quot;&quot; global _global_agent try : if _global_agent is not None : # Request stop _global_agent . stop () # Update UI immediately message = &quot;Stop requested - the agent will halt at the next safe point&quot; logger . info ( f&quot;🛑 { message } &quot; ) # Return UI updates return ( gr . update ( value = &quot;Stopping...&quot; , interactive = False ), # stop_button gr . update ( interactive = False ), # run_button ) except Exception as e : error_msg = f&quot;Error during stop: { str ( e ) } &quot; logger . error ( error_msg ) return ( gr . update ( value = &quot;Stop&quot; , interactive = True ), gr . update ( interactive = True ) ) async def stop_research_agent (): &quot;&quot;&quot;Request the agent to stop and update UI with enhanced feedback&quot;&quot;&quot; global _global_agent_state try : # Request stop _global_agent_state . request_stop () # Update UI immediately message = &quot;Stop requested - the agent will halt at the next safe point&quot; logger . info ( f&quot;🛑 { message } &quot; ) # Return UI updates return ( # errors_output gr . update ( value = &quot;Stopping...&quot; , interactive = False ), # stop_button gr . update ( interactive = False ), # run_button ) except Exception as e : error_msg = f&quot;Error during stop: { str ( e ) } &quot; logger . error ( error_msg ) return ( gr . update ( value = &quot;Stop&quot; , interactive = True ), gr . update ( interactive = True ) ) async def run_browser_agent ( agent_type , llm_provider , llm_model_name , llm_num_ctx , llm_temperature , llm_base_url , llm_api_key , use_own_browser , keep_browser_open , headless , disable_security , window_w , window_h , save_recording_path , save_agent_history_path , save_trace_path , enable_recording , task , add_infos , max_steps , use_vision , max_actions_per_step , tool_calling_method , chrome_cdp , max_input_tokens ): try : # Disable recording if the checkbox is unchecked if not enable_recording : save_recording_path = None # Ensure the recording directory exists if recording is enabled if save_recording_path : os . makedirs ( save_recording_path , exist_ok = True ) # Get the list of existing videos before the agent runs existing_videos = set () if save_recording_path : existing_videos = set ( glob . glob ( os . path . join ( save_recording_path , &quot;*.[mM][pP]4&quot; )) + glob . glob ( os . path . join ( save_recording_path , &quot;*.[wW][eE][bB][mM]&quot; )) ) task = resolve_sensitive_env_variables ( task ) # Run the agent llm = utils . get_llm_model ( provider = llm_provider , model_name = llm_model_name , num_ctx = llm_num_ctx , temperature = llm_temperature , base_url = llm_base_url , api_key = llm_api_key , ) if agent_type == &quot;org&quot; : final_result , errors , model_actions , model_thoughts , trace_file , history_file = await run_org_agent ( llm = llm , use_own_browser = use_own_browser , keep_browser_open = keep_browser_open , headless = headless , disable_security = disable_security , window_w = window_w , window_h = window_h , save_recording_path = save_recording_path , save_agent_history_path = save_agent_history_path , save_trace_path = save_trace_path , task = task , max_steps = max_steps , use_vision = use_vision , max_actions_per_step = max_actions_per_step , tool_calling_method = tool_calling_method , chrome_cdp = chrome_cdp , max_input_tokens = max_input_tokens ) elif agent_type == &quot;custom&quot; : final_result , errors , model_actions , model_thoughts , trace_file , history_file = await run_custom_agent ( llm = llm , use_own_browser = use_own_browser , keep_browser_open = keep_browser_open , headless = headless , disable_security = disable_security , window_w = window_w , window_h = window_h , save_recording_path = save_recording_path , save_agent_history_path = save_agent_history_path , save_trace_path = save_trace_path , task = task , add_infos = add_infos , max_steps = max_steps , use_vision = use_vision , max_actions_per_step = max_actions_per_step , tool_calling_method = tool_calling_method , chrome_cdp = chrome_cdp , max_input_tokens = max_input_tokens ) else : raise ValueError ( f&quot;Invalid agent type: { agent_type } &quot; ) # Get the list of videos after the agent runs (if recording is enabled) # latest_video = None # if save_recording_path: # new_videos = set( # glob.glob(os.path.join(save_recording_path, &quot;*.[mM][pP]4&quot;)) # + glob.glob(os.path.join(save_recording_path, &quot;*.[wW][eE][bB][mM]&quot;)) # ) # if new_videos - existing_videos: # latest_video = list(new_videos - existing_videos)[0] # Get the first new video gif_path = os . path . join ( os . path . dirname ( __file__ ), &quot;agent_history.gif&quot; ) return ( final_result , errors , model_actions , model_thoughts , gif_path , trace_file , history_file , gr . update ( value = &quot;Stop&quot; , interactive = True ), # Re-enable stop button gr . update ( interactive = True ) # Re-enable run button ) except gr . Error : raise except Exception as e : import traceback traceback . print_exc () errors = str ( e ) + &quot; \n &quot; + traceback . format_exc () return ( &#039;&#039; , # final_result errors , # errors &#039;&#039; , # model_actions &#039;&#039; , # model_thoughts None , # latest_video None , # history_file None , # trace_file gr . update ( value = &quot;Stop&quot; , interactive = True ), # Re-enable stop button gr . update ( interactive = True ) # Re-enable run button ) async def run_org_agent ( llm , use_own_browser , keep_browser_open , headless , disable_security , window_w , window_h , save_recording_path , save_agent_history_path , save_trace_path , task , max_steps , use_vision , max_actions_per_step , tool_calling_method , chrome_cdp , max_input_tokens ): try : global _global_browser , _global_browser_context , _global_agent extra_chromium_args = [ f&quot;--window-size= { window_w } , { window_h } &quot; ] cdp_url = chrome_cdp if use_own_browser : cdp_url = os . getenv ( &quot;CHROME_CDP&quot; , chrome_cdp ) chrome_path = os . getenv ( &quot;CHROME_PATH&quot; , None ) if chrome_path == &quot;&quot; : chrome_path = None chrome_user_data = os . getenv ( &quot;CHROME_USER_DATA&quot; , None ) if chrome_user_data : extra_chromium_args += [ f&quot;--user-data-dir= { chrome_user_data } &quot; ] else : chrome_path = None if _global_browser is None : _global_browser = Browser ( config = BrowserConfig ( headless = headless , cdp_url = cdp_url , disable_security = disable_security , chrome_instance_path = chrome_path , extra_chromium_args = extra_chromium_args , ) ) if _global_browser_context is None : _global_browser_context = await _global_browser . new_context ( config = BrowserContextConfig ( trace_path = save_trace_path if save_trace_path else None , save_recording_path = save_recording_path if save_recording_path else None , no_viewport = False , browser_window_size = BrowserContextWindowSize ( width = window_w , height = window_h ), ) ) if _global_agent is None : _global_agent = Agent ( task = task , llm = llm , use_vision = use_vision , browser = _global_browser , browser_context = _global_browser_context , max_actions_per_step = max_actions_per_step , tool_calling_method = tool_calling_method , max_input_tokens = max_input_tokens , generate_gif = True ) history = await _global_agent . run ( max_steps = max_steps ) history_file = os . path . join ( save_agent_history_path , f&quot; { _global_agent . state . agent_id } .json&quot; ) _global_agent . save_history ( history_file ) final_result = history . final_result () errors = history . errors () model_actions = history . model_actions () model_thoughts = history . model_thoughts () trace_file = get_latest_files ( save_trace_path ) return final_result , errors , model_actions , model_thoughts , trace_file . get ( &#039;.zip&#039; ), history_file except Exception as e : import traceback traceback . print_exc () errors = str ( e ) + &quot; \n &quot; + traceback . format_exc () return &#039;&#039; , errors , &#039;&#039; , &#039;&#039; , None , None finally : _global_agent = None # Handle cleanup based on persistence configuration if not keep_browser_open : if _global_browser_context : await _global_browser_context . close () _global_browser_context = None if _global_browser : await _global_browser . close () _global_browser = None async def run_custom_agent ( llm , use_own_browser , keep_browser_open , headless , disable_security , window_w , window_h , save_recording_path , save_agent_history_path , save_trace_path , task , add_infos , max_steps , use_vision , max_actions_per_step , tool_calling_method , chrome_cdp , max_input_tokens ): try : global _global_browser , _global_browser_context , _global_agent extra_chromium_args = [ f&quot;--window-size= { window_w } , { window_h } &quot; ] cdp_url = chrome_cdp if use_own_browser : cdp_url = os . getenv ( &quot;CHROME_CDP&quot; , chrome_cdp ) chrome_path = os . getenv ( &quot;CHROME_PATH&quot; , None ) if chrome_path == &quot;&quot; : chrome_path = None chrome_user_data = os . getenv ( &quot;CHROME_USER_DATA&quot; , None ) if chrome_user_data : extra_chromium_args += [ f&quot;--user-data-dir= { chrome_user_data } &quot; ] else : chrome_path = None controller = CustomController () # Initialize global browser if needed # if chrome_cdp not empty string nor None if ( _global_browser is None ) or ( cdp_url and cdp_url != &quot;&quot; and cdp_url != None ): _global_browser = CustomBrowser ( config = BrowserConfig ( headless = headless , disable_security = disable_security , cdp_url = cdp_url , chrome_instance_path = chrome_path , extra_chromium_args = extra_chromium_args , ) ) if _global_browser_context is None or ( chrome_cdp and cdp_url != &quot;&quot; and cdp_url != None ): _global_browser_context = await _global_browser . new_context ( config = BrowserContextConfig ( trace_path = save_trace_path if save_trace_path else None , save_recording_path = save_recording_path if save_recording_path else None , no_viewport = False , browser_window_size = BrowserContextWindowSize ( width = window_w , height = window_h ), ) ) # Create and run agent if _global_agent is None : _global_agent = CustomAgent ( task = task , add_infos = add_infos , use_vision = use_vision , llm = llm , browser = _global_browser , browser_context = _global_browser_context , controller = controller , system_prompt_class = CustomSystemPrompt , agent_prompt_class = CustomAgentMessagePrompt , max_actions_per_step = max_actions_per_step , tool_calling_method = tool_calling_method , max_input_tokens = max_input_tokens , generate_gif = True ) history = await _global_agent . run ( max_steps = max_steps ) history_file = os . path . join ( save_agent_history_path , f&quot; { _global_agent . state . agent_id } .json&quot; ) _global_agent . save_history ( history_file ) final_result = history . final_result () errors = history . errors () model_actions = history . model_actions () model_thoughts = history . model_thoughts () trace_file = get_latest_files ( save_trace_path ) return final_result , errors , model_actions , model_thoughts , trace_file . get ( &#039;.zip&#039; ), history_file except Exception as e : import traceback traceback . print_exc () errors = str ( e ) + &quot; \n &quot; + traceback . format_exc () return &#039;&#039; , errors , &#039;&#039; , &#039;&#039; , None , None finally : _global_agent = None # Handle cleanup based on persistence configuration if not keep_browser_open : if _global_browser_context : await _global_browser_context . close () _global_browser_context = None if _global_browser : await _global_browser . close () _global_browser = None async def run_with_stream ( agent_type , llm_provider , llm_model_name , llm_num_ctx , llm_temperature , llm_base_url , llm_api_key , use_own_browser , keep_browser_open , headless , disable_security , window_w , window_h , save_recording_path , save_agent_history_path , save_trace_path , enable_recording , task , add_infos , max_steps , use_vision , max_actions_per_step , tool_calling_method , chrome_cdp , max_input_tokens ): global _global_agent stream_vw = 80 stream_vh = int ( 80 * window_h // window_w ) if not headless : result = await run_browser_agent ( agent_type = agent_type , llm_provider = llm_provider , llm_model_name = llm_model_name , llm_num_ctx = llm_num_ctx , llm_temperature = llm_temperature , llm_base_url = llm_base_url , llm_api_key = llm_api_key , use_own_browser = use_own_browser , keep_browser_open = keep_browser_open , headless = headless , disable_security = disable_security , window_w = window_w , window_h = window_h , save_recording_path = save_recording_path , save_agent_history_path = save_agent_history_path , save_trace_path = save_trace_path , enable_recording = enable_recording , task = task , add_infos = add_infos , max_steps = max_steps , use_vision = use_vision , max_actions_per_step = max_actions_per_step , tool_calling_method = tool_calling_method , chrome_cdp = chrome_cdp , max_input_tokens = max_input_tokens ) # Add HTML content at the start of the result array html_content = f&quot;&lt;h1 style=&#039;width: { stream_vw } vw; height: { stream_vh } vh&#039;&gt;Using browser...&lt;/h1&gt;&quot; yield [ html_content ] + list ( result ) else : try : # Run the browser agent in the background agent_task = asyncio . create_task ( run_browser_agent ( agent_type = agent_type , llm_provider = llm_provider , llm_model_name = llm_model_name , llm_num_ctx = llm_num_ctx , llm_temperature = llm_temperature , llm_base_url = llm_base_url , llm_api_key = llm_api_key , use_own_browser = use_own_browser , keep_browser_open = keep_browser_open , headless = headless , disable_security = disable_security , window_w = window_w , window_h = window_h , save_recording_path = save_recording_path , save_agent_history_path = save_agent_history_path , save_trace_path = save_trace_path , enable_recording = enable_recording , task = task , add_infos = add_infos , max_steps = max_steps , use_vision = use_vision , max_actions_per_step = max_actions_per_step , tool_calling_method = tool_calling_method , chrome_cdp = chrome_cdp , max_input_tokens = max_input_tokens ) ) # Initialize values for streaming html_content = f&quot;&lt;h1 style=&#039;width: { stream_vw } vw; height: { stream_vh } vh&#039;&gt;Using browser...&lt;/h1&gt;&quot; final_result = errors = model_actions = model_thoughts = &quot;&quot; recording_gif = trace = history_file = None # Periodically update the stream while the agent task is running while not agent_task . done (): try : encoded_screenshot = await capture_screenshot ( _global_browser_context ) if encoded_screenshot is not None : html_content = f&#039;&lt;img src=&quot;data:image/jpeg;base64, { encoded_screenshot } &quot; style=&quot;width: { stream_vw } vw; height: { stream_vh } vh ; border:1px solid #ccc;&quot;&gt;&#039; else : html_content = f&quot;&lt;h1 style=&#039;width: { stream_vw } vw; height: { stream_vh } vh&#039;&gt;Waiting for browser session...&lt;/h1&gt;&quot; except Exception as e : html_content = f&quot;&lt;h1 style=&#039;width: { stream_vw } vw; height: { stream_vh } vh&#039;&gt;Waiting for browser session...&lt;/h1&gt;&quot; if _global_agent and _global_agent . state . stopped : yield [ html_content , final_result , errors , model_actions , model_thoughts , recording_gif , trace , history_file , gr . update ( value = &quot;Stopping...&quot; , interactive = False ), # stop_button gr . update ( interactive = False ), # run_button ] break else : yield [ html_content , final_result , errors , model_actions , model_thoughts , recording_gif , trace , history_file , gr . update (), # Re-enable stop button gr . update () # Re-enable run button ] await asyncio . sleep ( 0.1 ) # Once the agent task completes, get the results try : result = await agent_task final_result , errors , model_actions , model_thoughts , recording_gif , trace , history_file , stop_button , run_button = result except gr . Error : final_result = &quot;&quot; model_actions = &quot;&quot; model_thoughts = &quot;&quot; recording_gif = trace = history_file = None except Exception as e : errors = f&quot;Agent error: { str ( e ) } &quot; yield [ html_content , final_result , errors , model_actions , model_thoughts , recording_gif , trace , history_file , stop_button , run_button ] except Exception as e : import traceback yield [ f&quot;&lt;h1 style=&#039;width: { stream_vw } vw; height: { stream_vh } vh&#039;&gt;Waiting for browser session...&lt;/h1&gt;&quot; , &quot;&quot; , f&quot;Error: { str ( e ) } \n { traceback . format_exc () } &quot; , &quot;&quot; , &quot;&quot; , None , None , None , gr . update ( value = &quot;Stop&quot; , interactive = True ), # Re-enable stop button gr . update ( interactive = True ) # Re-enable run button ] # Define the theme map globally theme_map = { &quot;Default&quot; : Default (), &quot;Soft&quot; : Soft (), &quot;Monochrome&quot; : Monochrome (), &quot;Glass&quot; : Glass (), &quot;Origin&quot; : Origin (), &quot;Citrus&quot; : Citrus (), &quot;Ocean&quot; : Ocean (), &quot;Base&quot; : Base () } async def close_global_browser (): global _global_browser , _global_browser_context if _global_browser_context : await _global_browser_context . close () _global_browser_context = None if _global_browser : await _global_browser . close () _global_browser = None async def run_deep_search ( research_task , max_search_iteration_input , max_query_per_iter_input , llm_provider , llm_model_name , llm_num_ctx , llm_temperature , llm_base_url , llm_api_key , use_vision , use_own_browser , headless , chrome_cdp ): from src . utils . deep_research import deep_research global _global_agent_state # Clear any previous stop request _global_agent_state . clear_stop () llm = utils . get_llm_model ( provider = llm_provider , model_name = llm_model_name , num_ctx = llm_num_ctx , temperature = llm_temperature , base_url = llm_base_url , api_key = llm_api_key , ) markdown_content , file_path = await deep_research ( research_task , llm , _global_agent_state , max_search_iterations = max_search_iteration_input , max_query_num = max_query_per_iter_input , use_vision = use_vision , headless = headless , use_own_browser = use_own_browser , chrome_cdp = chrome_cdp ) return markdown_content , file_path , gr . update ( value = &quot;Stop&quot; , interactive = True ), gr . update ( interactive = True ) def create_ui ( config , theme_name = &quot;Ocean&quot; ): css = &quot;&quot;&quot; .gradio-container { max-width: 1200px !important; margin: auto !important; padding-top: 20px !important; } .header-text { text-align: center; margin-bottom: 30px; } .theme-section { margin-bottom: 20px; padding: 15px; border-radius: 10px; } &quot;&quot;&quot; with gr . Blocks ( title = &quot;Browser Use WebUI&quot; , theme = theme_map [ theme_name ], css = css ) as demo : with gr . Row (): gr . Markdown ( &quot;&quot;&quot; # 🌐 Browser Use WebUI ### Control your browser with AI assistance &quot;&quot;&quot; , elem_classes = [ &quot;header-text&quot; ], ) with gr . Tabs () as tabs : with gr . TabItem ( &quot;⚙️ Agent Settings&quot; , id = 1 ): with gr . Group (): agent_type = gr . Radio ( [ &quot;org&quot; , &quot;custom&quot; ], label = &quot;Agent Type&quot; , value = config [ &#039;agent_type&#039; ], info = &quot;Select the type of agent to use&quot; , ) with gr . Column (): max_steps = gr . Slider ( minimum = 1 , maximum = 200 , value = config [ &#039;max_steps&#039; ], step = 1 , label = &quot;Max Run Steps&quot; , info = &quot;Maximum number of steps the agent will take&quot; , ) max_actions_per_step = gr . Slider ( minimum = 1 , maximum = 20 , value = config [ &#039;max_actions_per_step&#039; ], step = 1 , label = &quot;Max Actions per Step&quot; , info = &quot;Maximum number of actions the agent will take per step&quot; , ) with gr . Column (): use_vision = gr . Checkbox ( label = &quot;Use Vision&quot; , value = config [ &#039;use_vision&#039; ], info = &quot;Enable visual processing capabilities&quot; , ) max_input_tokens = gr . Number ( label = &quot;Max Input Tokens&quot; , value = 128000 , precision = 0 ) tool_calling_method = gr . Dropdown ( label = &quot;Tool Calling Method&quot; , value = config [ &#039;tool_calling_method&#039; ], interactive = True , allow_custom_value = True , # Allow users to input custom model names choices = [ &quot;auto&quot; , &quot;json_schema&quot; , &quot;function_calling&quot; ], info = &quot;Tool Calls Funtion Name&quot; , visible = False ) with gr . TabItem ( &quot;🔧 LLM Settings&quot; , id = 2 ): with gr . Group (): llm_provider = gr . Dropdown ( choices = [ provider for provider , model in utils . model_names . items ()], label = &quot;LLM Provider&quot; , value = config [ &#039;llm_provider&#039; ], info = &quot;Select your preferred language model provider&quot; ) llm_model_name = gr . Dropdown ( label = &quot;Model Name&quot; , choices = utils . model_names [ &#039;openai&#039; ], value = config [ &#039;llm_model_name&#039; ], interactive = True , allow_custom_value = True , # Allow users to input custom model names info = &quot;Select a model in the dropdown options or directly type a custom model name&quot; ) llm_num_ctx = gr . Slider ( minimum = 2 ** 8 , maximum = 2 ** 16 , value = config [ &#039;llm_num_ctx&#039; ], step = 1 , label = &quot;Max Context Length&quot; , info = &quot;Controls max context length model needs to handle (less = faster)&quot; , visible = config [ &#039;llm_provider&#039; ] == &quot;ollama&quot; ) llm_temperature = gr . Slider ( minimum = 0.0 , maximum = 2.0 , value = config [ &#039;llm_temperature&#039; ], step = 0.1 , label = &quot;Temperature&quot; , info = &quot;Controls randomness in model outputs&quot; ) with gr . Row (): llm_base_url = gr . Textbox ( label = &quot;Base URL&quot; , value = config [ &#039;llm_base_url&#039; ], info = &quot;API endpoint URL (if required)&quot; ) llm_api_key = gr . Textbox ( label = &quot;API Key&quot; , type = &quot;password&quot; , value = config [ &#039;llm_api_key&#039; ], info = &quot;Your API key (leave blank to use .env)&quot; ) # Change event to update context length slider def update_llm_num_ctx_visibility ( llm_provider ): return gr . update ( visible = llm_provider == &quot;ollama&quot; ) # Bind the change event of llm_provider to update the visibility of context length slider llm_provider . change ( fn = update_llm_num_ctx_visibility , inputs = llm_provider , outputs = llm_num_ctx ) with gr . TabItem ( &quot;🌐 Browser Settings&quot; , id = 3 ): with gr . Group (): with gr . Row (): use_own_browser = gr . Checkbox ( label = &quot;Use Own Browser&quot; , value = config [ &#039;use_own_browser&#039; ], info = &quot;Use your existing browser instance&quot; , ) keep_browser_open = gr . Checkbox ( label = &quot;Keep Browser Open&quot; , value = config [ &#039;keep_browser_open&#039; ], info = &quot;Keep Browser Open between Tasks&quot; , ) headless = gr . Checkbox ( label = &quot;Headless Mode&quot; , value = config [ &#039;headless&#039; ], info = &quot;Run browser without GUI&quot; , ) disable_security = gr . Checkbox ( label = &quot;Disable Security&quot; , value = config [ &#039;disable_security&#039; ], info = &quot;Disable browser security features&quot; , ) enable_recording = gr . Checkbox ( label = &quot;Enable Recording&quot; , value = config [ &#039;enable_recording&#039; ], info = &quot;Enable saving browser recordings&quot; , ) with gr . Row (): window_w = gr . Number ( label = &quot;Window Width&quot; , value = config [ &#039;window_w&#039; ], info = &quot;Browser window width&quot; , ) window_h = gr . Number ( label = &quot;Window Height&quot; , value = config [ &#039;window_h&#039; ], info = &quot;Browser window height&quot; , ) chrome_cdp = gr . Textbox ( label = &quot;CDP URL&quot; , placeholder = &quot;http://localhost:9222&quot; , value = &quot;&quot; , info = &quot;CDP for google remote debugging&quot; , interactive = True , # Allow editing only if recording is enabled ) save_recording_path = gr . Textbox ( label = &quot;Recording Path&quot; , placeholder = &quot;e.g. ./tmp/record_videos&quot; , value = config [ &#039;save_recording_path&#039; ], info = &quot;Path to save browser recordings&quot; , interactive = True , # Allow editing only if recording is enabled ) save_trace_path = gr . Textbox ( label = &quot;Trace Path&quot; , placeholder = &quot;e.g. ./tmp/traces&quot; , value = config [ &#039;save_trace_path&#039; ], info = &quot;Path to save Agent traces&quot; , interactive = True , ) save_agent_history_path = gr . Textbox ( label = &quot;Agent History Save Path&quot; , placeholder = &quot;e.g., ./tmp/agent_history&quot; , value = config [ &#039;save_agent_history_path&#039; ], info = &quot;Specify the directory where agent history should be saved.&quot; , interactive = True , ) with gr . TabItem ( &quot;🤖 Run Agent&quot; , id = 4 ): task = gr . Textbox ( label = &quot;Task Description&quot; , lines = 4 , placeholder = &quot;Enter your task here...&quot; , value = config [ &#039;task&#039; ], info = &quot;Describe what you want the agent to do&quot; , ) add_infos = gr . Textbox ( label = &quot;Additional Information&quot; , lines = 3 , placeholder = &quot;Add any helpful context or instructions...&quot; , info = &quot;Optional hints to help the LLM complete the task&quot; , ) with gr . Row (): run_button = gr . Button ( &quot;▶️ Run Agent&quot; , variant = &quot;primary&quot; , scale = 2 ) stop_button = gr . Button ( &quot;⏹️ Stop&quot; , variant = &quot;stop&quot; , scale = 1 ) with gr . Row (): browser_view = gr . HTML ( value = &quot;&lt;h1 style=&#039;width:80vw; height:50vh&#039;&gt;Waiting for browser session...&lt;/h1&gt;&quot; , label = &quot;Live Browser View&quot; , ) gr . Markdown ( &quot;### Results&quot; ) with gr . Row (): with gr . Column (): final_result_output = gr . Textbox ( label = &quot;Final Result&quot; , lines = 3 , show_label = True ) with gr . Column (): errors_output = gr . Textbox ( label = &quot;Errors&quot; , lines = 3 , show_label = True ) with gr . Row (): with gr . Column (): model_actions_output = gr . Textbox ( label = &quot;Model Actions&quot; , lines = 3 , show_label = True , visible = False ) with gr . Column (): model_thoughts_output = gr . Textbox ( label = &quot;Model Thoughts&quot; , lines = 3 , show_label = True , visible = False ) recording_gif = gr . Image ( label = &quot;Result GIF&quot; , format = &quot;gif&quot; ) trace_file = gr . File ( label = &quot;Trace File&quot; ) agent_history_file = gr . File ( label = &quot;Agent History&quot; ) with gr . TabItem ( &quot;🧐 Deep Research&quot; , id = 5 ): research_task_input = gr . Textbox ( label = &quot;Research Task&quot; , lines = 5 , value = &quot;Compose a report on the use of Reinforcement Learning for training Large Language Models, encompassing its origins, current advancements, and future prospects, substantiated with examples of relevant models and techniques. The report should reflect original insights and analysis, moving beyond mere summarization of existing literature.&quot; ) with gr . Row (): max_search_iteration_input = gr . Number ( label = &quot;Max Search Iteration&quot; , value = 3 , precision = 0 ) # precision=0 确保是整数 max_query_per_iter_input = gr . Number ( label = &quot;Max Query per Iteration&quot; , value = 1 , precision = 0 ) # precision=0 确保是整数 with gr . Row (): research_button = gr . Button ( &quot;▶️ Run Deep Research&quot; , variant = &quot;primary&quot; , scale = 2 ) stop_research_button = gr . Button ( &quot;⏹ Stop&quot; , variant = &quot;stop&quot; , scale = 1 ) markdown_output_display = gr . Markdown ( label = &quot;Research Report&quot; ) markdown_download = gr . File ( label = &quot;Download Research Report&quot; ) # Bind the stop button click event after errors_output is defined stop_button . click ( fn = stop_agent , inputs = [], outputs = [ stop_button , run_button ], ) # Run button click handler run_button . click ( fn = run_with_stream , inputs = [ agent_type , llm_provider , llm_model_name , llm_num_ctx , llm_temperature , llm_base_url , llm_api_key , View remainder of file in raw view Footer &copy; 2025 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact Manage cookies Do not share my personal information You can’t perform that action at this time.
Wery web UI|1743007194726|browser-use/web-ui: Run AI Agent in your browser. - GitHub <https://github.com/browser-use/web-ui>;Joachim W&#233;ry <https://www.joachimwery.tech/>;GitHub - open-webui/open-webui: User-friendly AI Interface … <https://github.com/open-webui/open-webui>;WeWeb AI <https://www.weweb.io/ai>;web-ui/webui.py at main &#183; browser-use/web-ui - GitHub <https://github.com/browser-use/web-ui/blob/main/webui.py>;Web Developer – WERY <https://www.wery.nl/web-developer/>;Uiverse | The Largest Library of Open-Source UI elements <https://uiverse.io/>;Browser Use Web UI: an open source framework for running AI ... <https://www.aisharenet.com/en/browser-use-web-ui/>;WebUI <https://www.webui.me/>;Open-webui Overview, Examples, Pros and Cons in 2025 - best-of-web … <https://best-of-web.builder.io/library/open-webui/open-webui>
